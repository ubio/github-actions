on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      ref:
        required: true
        type: string
      name:
        required: true
        type: string
      file:
        required: false
        type: string
        default: "Dockerfile"
      platforms:
        required: false
        type: string
        default: "linux/x86_64"
    secrets:
      REGISTRY_SECRET:
        required: true
      SLACK_CHANNEL:
        required: true
      SLACK_TOKEN:
        required: true

jobs:
  build_image:
    name: Image
    runs-on: ubuntu-latest
    steps:
      - name: Extract tag as an ENV var
        run: |
          ref="${{ github.ref }}"
          echo "TAG=${ref/refs\/tags\//}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to the Registry
        uses: docker/login-action@v1
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.REGISTRY_SECRET }}
      - name: Use EU Artifact Registry
        # Should be removed after repos have been updated to use the eu prefix
        id: use_eu_registry
        run: |
          if [[ ${{ inputs.image }} != eu.* ]]; then
            echo "Adding EU prefix"
            echo "::set-output name=image::eu.${{ inputs.image }}"
          else
            echo "EU prefix already present"
            echo "::set-output name=image::${{ inputs.image }}"
          fi
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx
      - name: Build and Push image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.use_eu_registry.outputs.image }}:${{ env.TAG }},${{ steps.use_eu_registry.outputs.image }}:latest
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          push: true
          build-args: |
            VERSION=${{ env.TAG }}
          labels: |
            source-url=https://github.com/${{ github.repository }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Notify Slack
        if: ${{ success() }}
        uses: docker://automationcloud/rsslack:latest
        with:
          channel: ${{ secrets.slack_channel }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          message: ":package: *${{ inputs.name }}* has been built and pushed to `${{ steps.use_eu_registry.outputs.image }}:${{ env.TAG }}`"
      - name: Notify Slack on Failure
        if: ${{ failure() }}
        uses: docker://automationcloud/rsslack:latest
        with:
          channel: ${{ secrets.SLACK_CHANNEL }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          message: ":suspicious: *${{ inputs.name }}* build failed - Run <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>"
